# vim:ft=snippets
###################
#  General Notes  #
###################
# Use b for any command that starts a line
# Use w for any command that occurs on a word boundary

###########################
#  Global Python helpers  #
###########################
global !p
def fix_indent(snip):
	"""
	send <c-f> in insert mode to remove indentation
	"""
	vim.eval('feedkeys("\<c-f>")')

texMathZones = ['texMathZone'+x for x in 
				['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E',
				'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
				'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W',
				'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+ \
								", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]

def math():
	"""
	Check whether we are in a math context; return a boolean.
	"""
	synstackids = vim.eval("synstack(line('.'), col('.')" + \
						   " - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) 
					 if i in texIgnoreMathZoneIds or
					 i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

###############
#  Templates  #
###############
snippet template1 "template used in tmgain paper" b
\documentclass[12pt, reqno]{amsart}

% for enuma, enumi
\usepackage{enumerate}
\usepackage{eucal,color,graphicx}
\usepackage{caption}
\usepackage{subfig}
\usepackage[scientific-notation=true]{siunitx}

\usepackage{tikz,pgfplots}
\pgfplotsset{compat=1.15}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{backgrounds, calc, through, intersections}
\usetikzlibrary{arrows,chains,matrix,positioning,scopes}
\usetikzlibrary{shapes.arrows}
\usetikzlibrary{shapes.geometric,calc}

\setlength{\topmargin}{-0.4in}
\setlength{\textheight}{9.0in}     %8.5
\setlength{\textwidth}{6.5in}      % {6truein}
\setlength{\oddsidemargin}{.20in}  %
\setlength{\evensidemargin}{.20in} %
\numberwithin{equation}{section}

\newtheorem{theorem}{Theorem}[section]
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{corollary}[theorem]{Corollary}%[section]

\theoremstyle{definition}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{example}[theorem]{Example}

\theoremstyle{remark}
\newtheorem{remark}[theorem]{Remark}
\newtheorem{assumption}{Assumption}[section]

\newcommand{\N}{\mathbb{N}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\C}{\mathbb{C}}
\newcommand{\Z}{\mathbb{Z}}
\newcommand{\F}{\mathbb{F}}

\newcommand{\XX}{\mathcal{X}}
\newcommand{\YY}{\mathcal{Y}}

\let\d\partial
\renewcommand{\div}{\mathop\text{div}}
\newcommand{\grad}{\ensuremath{\mathop{{\text{grad}}}}}
\newcommand{\curl}{{\ensuremath{\text{curl}\,}}}
\newcommand{\diam}{\ensuremath{\mathop{{\text{diam}}}}}
\newcommand{\card}{\ensuremath{\mathop{{\text{card}}}}} % cardinality
\newcommand{\co}{\ensuremath{\mathop{{\text{co}}}}} % convex hull
\newcommand{\vol}{\ensuremath{\mathop{{\text{vol}}}}} % convex hull

\graphicspath{{./figs/}}

\begin{document}
	$0
\end{document}
endsnippet

snippet tfig "Tikz figure with grid" b
\begin{figure}[ht]
	\centering
	\begin{tikzpicture}[>=stealth]
	\draw[step=0.5, help lines, gray!50] (-7.25,-2.25) grid (7.25,2.25);
	\foreach \x in {-7,...,7}
		\draw (\x,-2pt) -- (\x,2pt);
	\foreach \y in {-2,...,2}
		\draw (-2pt,\y) -- (2pt,\y);
	\draw [<->] (-7.25,0) -- (7.25,0);
	\draw [<->] (0,-2.25) -- (0,2.25);
	% finish drawing here 
	$0
	\end{tikzpicture}
	\caption{${1:figure}}
\end{figure}


endsnippet
##################
#  Environments  #
##################
snippet beg "begin{} / end{}" bA
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet bbeg "begin{} / end{}" bA
\begin{$1}[${2:name}]
	\label{$3}
	$0
\end{$1}
endsnippet

snippet abstract "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

# htpb: here, top, page, bottom
snippet table "Table environment" bA
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${4:c}}
		\hline \hline
		${5:headers}
		\hline
		$0
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" bA
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" bA
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

# can't make auto -- overrides itemize
post_expand "fix_indent(snip)"
snippet it "Individual item" b
\item $0
endsnippet

post_expand "fix_indent(snip)"
snippet ito "Individual item with option" bA
\item[$1] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet plot "Plot" bA
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

########################
#  Document structure  #
########################

snippet tit "Title" bA
\title{$1}
$0
endsnippet

snippet aut "Author" bA
\author{${1:D.~Drake}}
$0
endsnippet

snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet tzn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

################
#  Math modes  #
################
snippet mk "Inline math mode" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math mode" wA
\[
	${1:${VISUAL}}
\] $0
endsnippet

###########
#  logic  #
###########

priority 10
context "math()"
snippet EE "exists" A
\exists 
endsnippet

priority 10
context "math()"
snippet AA "forall" A
\forall 
endsnippet

priority 10
context "math()"
snippet => "implies" Ai
\implies
endsnippet

priority 10
context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

priority 10
context "math()"
snippet iff "iff" Ai
\iff
endsnippet

# trying to insert a break in align, but complicated
#priority 10
#context "math()"
#snippet "(&\S*)" "break for aligned" ri
#`!p snip.rv = match.group(1)`$1  \\\\
#endsnippet

priority 10
context "math()"
snippet == "equals align" iA
&= $1 \\\\
endsnippet

priority 10
context "math()"
snippet != "not equals" iA
\neq 
endsnippet

priority 10
context "math()"
snippet neq "not equals" iA
\neq 
endsnippet

priority 10
context "math()"
snippet <= "leq" iA
\le 
endsnippet

priority 10
context "math()"
snippet >= "geq" iA
\ge 
endsnippet

priority 10
context "math()"
snippet >> ">>" iA
\gg
endsnippet

priority 10
context "math()"
snippet << "<<" iA
\ll
endsnippet

priority 10
context "math()"
snippet ~~ "~" iA
\sim 
endsnippet
##############
#  mappings  #
##############

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 10
context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

priority 10
context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

priority 10
context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

priority 10
context "math()"
snippet seq "sequence" i
(${1:x}_${2:n})_{${3:$2}${4:\in \\N}}$0
endsnippet

priority 10
context "math()"
snippet lim "limit" w
\\lim_{${1:n} \to ${2:\infty}} $0
endsnippet

priority 100
context "math()"
snippet "(limsup|liminf)" "lim inf or lim sup" wr
\\`!p snip.rv = match.group(1)`_{${1:n} \to ${2:\infty}} $0
endsnippet

priority 10
context "math()"
snippet "(?<!lim)(sup|inf|max|min)" "sup or inf" wr
\\`!p snip.rv = match.group(1)`_{${1:x} \in ${2:\R}} $0
endsnippet

##########
#  sets  #
##########

priority 10
context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

priority 10
context "math()"
snippet compl "complement" iA
^{c}
endsnippet

priority 10
context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

priority 100
context "math()"
snippet bbb "subseteq" iA
\subseteq 
endsnippet

priority 100
context "math()"
snippet ppp "supseteq" iA
\supseteq 
endsnippet

priority 10
context "math()"
snippet bb "subset" i
\subset 
endsnippet

priority 10
context "math()"
snippet pp "subseteq" i
\supset 
endsnippet

priority 10
context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

priority 10
context "math()"
snippet inn "in " iA
\in 
endsnippet

priority 10
context "math()"
snippet cap "cap" iA
\cap 
endsnippet

priority 10
context "math()"
snippet cup "cup" iA
\cup 
endsnippet

priority 100
context "math()"
snippet bigcup "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

priority 100
context "math()"
snippet bigcap "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

priority 10
context "math()"
snippet empty "emptyset" iA
\emptyset
endsnippet

priority 10
context "math()"
snippet bdry "boundary" iA
\partial ${1:\Omega}
endsnippet

# Assume these standard macros are defined
priority 10
context "math()"
snippet NN "n" iA
\N
endsnippet

priority 10
context "math()"
snippet RR "real" iA
\R
endsnippet

priority 10
context "math()"
snippet QQ "Q" iA
\Q
endsnippet

priority 10
context "math()"
snippet ZZ "Z" iA
\Z
endsnippet

##############
#  grouping  #
##############

# Don't put space before $0. We may need sub or superscripts
priority 10
context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

priority 10
context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

priority 10
context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

priority 10
context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right|$0
endsnippet

priority 10
context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

priority 10
context "math()"
snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

priority 10
context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right]$0
endsnippet

priority 10
context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

priority 10
context "math()"
snippet lr< "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

################
#  operations  #
################

priority 10
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

priority 10
context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 10
context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

priority 200
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 10
context "math()"
snippet sum "sum" w
\sum_{${1:j}${2:=${3:1}}}${4:^${5:\infty}} $0
endsnippet

priority 10
context "math()"
snippet ssum "simple sum" wA
\sum_{${1:x \in }${2:X}} $0
endsnippet

priority 10
context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

priority 10
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

priority 10
context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

priority 10
context "math()"
snippet xx "cross" iA
\times 
endsnippet

# in many cases it would be nice to append a space,
# but sometimes we need a superscript.
priority 10
context "math()"
snippet nrm "norm" iA
\|$1\|${2:_{$3}}$0
endsnippet

priority 100
context "math()"
snippet snm "seminorm or abs value" iA
|$1|${2:_{$3}}$0
endsnippet

# Some authors use parens instead of angles.
priority 10
context "math()"
snippet fnl "functional action (duality pairing)" wA
\langle ${1:\cdot}, ${2:\cdot} \rangle${3:_{$4}} $0
endsnippet

priority 10
context "math()"
snippet blf "bilinear form" wA
${1:a}(${2:\cdot}, ${3:\cdot})${4:_{$5}}$0
endsnippet

priority 10
context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

priority 10
context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

priority 10
context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

priority 10
context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

# negative lookbehind (asserts literal \ not matched before pattern)
priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "fns1" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|int)' "fns2" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

###############
#  variables  #
###############

priority 100
context "math()"
snippet "\'(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|r|s|t|u|x|y|z)" "vars" rwA
\\`!p snip.rv = \
	dict(zip('a b c d e f g h i j k l m n o p r s t u x y z' \
		.split(), ('alpha beta chi delta epsilon phi gamma theta ' + \
		'iota psi kappa lambda mu nu omega pi ' + \
		'rho sigma tau upsilon xi eta zeta') \
		.split()))[match.group(1)]`
endsnippet

priority 100
context "math()"
snippet "\"(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|r|s|t|u|x|y|z)" "vars" rwA
\\`!p snip.rv = \
	dict(zip('a b c d e f g h i j k l m n o p r s t u x y z' \
		.split(), ('Alpha Beta Chi Delta Epsilon Phi Gamma Theta ' + \
		'Iota Psi Kappa Lambda Mu Nu Omega Pi ' + \
		'Rho Sigma Tau Upsilon Xi Eta Zeta') \
		.split()))[match.group(1)]`
endsnippet


priority 10
context "math()"
snippet bar "bar" iA
\overline{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet hat "hat" iA
\hat{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet tilde "tilde" iA
\tilde{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

# dot is more complicated
priority 100
context "math()"
snippet "(?<!\\)([clv]dot)" "cdot ldots vdots" riA
\\`!p snip.rv=match.group(1)`
endsnippet

priority 10
context "math()"
snippet "(?<!\\)([a-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

##########
#  misc  #
##########

priority 10
context "math()"
snippet ubr "underbrace" bA
\underbrace{$1}_{$2}$0
endsnippet

priority 10
context "math()"
snippet obr "overbrace" bA
\overbrace{$1}^{$2}$0
endsnippet

priority 10
context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

priority 10
context "math()"
snippet lll "l" iA
\ell
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

priority 10
snippet ooo "\infty" iA
\infty
endsnippet

priority 10
context "math()"
snippet || "mid" iA
\mid 
endsnippet

priority 10
context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

priority 10
context "math()"
snippet tt "text" iA
\text{${1:${VISUAL}}}$0
endsnippet

priority 10
context "math()"
snippet mbf "math boldface" iA
\mathbf{${1:${VISUAL:v}}}$0
endsnippet

priority 10
context "math()"
snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

priority 10
context "math()"
snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

priority 10
snippet ctd "connected" A
connected
endsnippet

priority 10
snippet cts "continuous" A
continuous
endsnippet

priority 10
snippet lip "Lipschitz" A
Lipschitz
endsnippet

priority 10
snippet smsr "sigma finite measure" A
$\sigma$-measure
endsnippet

